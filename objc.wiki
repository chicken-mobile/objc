[[toc:]]
[[tags: eggs]]

== objc

=== Requirements

[[make]] [[matchable]] [[miscmacros]] [[fmt]] [[concurrent-native-callbacks]]

This extension makes use of [[http://dyncall.org|dyncall]], a library for constructing
C function-calls at runtime. The library needs to be installed for this egg to function properly.

=== Introduction

This egg provides a leightweight interface to [[https://en.wikipedia.org/wiki/Objective-C|Objective-C]].
It has been tested on Linux with [[http://gnustep.org|GNUstep]] and Mac OS X.

This egg is part of the [[https://github.com/organizations/chicken-mobile|chicken-mobile]]
project. The sources are available here: [[https://github.com/chicken-mobile/concurrent-native-callbacks]]

=== Programming interface

==== Declarations and definitions

<syntax>(objc-import IMPORT ...)</syntax>

Expands into an {{#import}} preprocessor directive, the string {{IMPORT}} designates
an Objective-C headerfile and can alternatively be of the form {{"<...>"}}.

This form is only available in compiled code.

<syntax>(define-objc-class NAME)</syntax>

Forward-declares an Objective-C class by expanding into a {{@class}}
declaration.

This form can only be used in compiled code.

<syntax>(define-objc-interface NAME [: PARENT] DECLARATION ...)</syntax>

Defines an interface (as in {{@interface ... @end}}). {{NAME}} and the
optional {{PARENT}} should be symbols and valid Objective-C classnames.

A {{DECLARATION}} consists of field or method specifications:

Declaring a "field" (an instance variable):

{{(field FOREIGNTYPE NAME)}}

Declaring a class or instance method (unary):
 
{{(+ (RESULTTYPE) SYMBOL)}}
{{(- (RESULTTYPE) SYMBOL)}}

Declaring a class or instance method with arguments:

{{(+ (RESULTTYPE) KEYWORD: (ARGUMENTTYPE) VARIABLENAME ...)}}
{{(- (RESULTTYPE) KEYWORD: (ARGUMENTTYPE) VARIABLENAME ...)}}

{{(RESULTTYPE)}} may be omitted and defaults to {{id}}.

{{RESULTTYPE}} and {{ARGUMENTTYPE}} follow normal foreign-type
syntax. In addition to the usual foreign type specifiers, the types
{{id}}, {{class}} and {{SEL}} are also available and correspond to
{{c-pointer}}.

Note that this declaration is only valid inside the current
compilation unit.

This form may only be used in compiled code.

<syntax>(define-objc-implementation NAME DEFINITION ...)</syntax>

Defines an implementation section for methods of the class {{NAME}}
(as in {{@implementation ... @end}}).

{{DEFINITION}} should be of the form

{{(DECLARATION BODY ...)}} where {{DECLARATION}} follows the syntax given above
for {{define-objc-interface}}. Additionally, asynchronously callable methods
can be defined (see below).

Inside the {{BODY ...}} expressions the implicit variable {{self}} refers to the
current receiver.

This form can only be used in compiled code.

<syntax>(send RECEIVER SELECTOR ARGUMENT ...)</syntax>

Sends the message given in the symbol or keyword {{SELECTOR}} to the object {{RECEIVER}}
with the given arguments and returns its result.

<syntax>(@selector NAME)</syntax>

Returns the selector with the given name, which should be a symbol or keyword. The
{{NAME}} is not evaluated.

<syntax>(@ STRING)</syntax>
<syntax>(@ RECEIVER SELECTOR ARGUMENT ...)</syntax>

The {{@}} syntax has three different meanings, depending on the type and number of arguments:

* {{(@ RECEIVER SYMBOL)}} is equivalent to {{(send RECEIVER SYMBOL)}}.

* {{(@ RECEIVER KEYWORD1 ARGUMENT1 ...)}} is equivalent to {{(send RECEIVER KEYWORD1:KEYWORD2:... ARGUMENT1 ARGUMENT2 ...)}}. The receiver may be the special variable {{super}} which sends to a message to {{self}} but starts the message-lookup in the superclass of the receiver (this is only valid inside a method-implementation).

==== Objects

<procedure>(object? X)</procedure>

Returns true if {{X}} is an object- or class-pointer or {{#f}} otherwise.

<procedure>(object-ref OBJECT SYMBOL)</procedure>

Returns the instance-variable named {{SYMBOL}} of the given instance.

<procedure>(object-set! OBJECT SYMBOL X)</procedure>

Assigns {{X}} to the instance-variable {{SYMBOL}} of the given instance. Alternatively you
can also use the form {{(set! (object-ref OBJECT SYMBOL) X)}}.

<variable>nil</variable>

The same as {{#f}} which is CHICKEN's representation of a NULL pointer.

==== Classes

<class>Object</class>

Holds a pointer to class {{Object}}.

<procedure>(class? X)</procedure>

Returns true if {{X}} is a class-pointer or {{#f}} otherwise.

<procedure>(metaclass? X)</procedure>

Returns true if {{X}} is a pointer to a meta-class or {{#f}} otherwise.

<procedure>(class-of OBJECT)</procedure>

Returns a pointer to the class of the given object. If {{OBJECT}} is a class, the
result will be a metaclass instance.

<procedure>(class-name CLASS)</procedure>

Returns the name of the given class, which is a string.

<procedure>(find-class NAME)</procedure>

Finds the class with the given name (which should be string) or {{#f}} if no such
class exists.

<procedure>(superclass-of CLASS)</procedure>

Returns the superclass of the given class or {{#f}} if {{CLASS}} is a root class.

==== Selectors

<procedure>(selector? X)</procedure>

Returns true if {{X}} is a selector-pointer or {{#f}} otherwise.

<procedure>(string->selector STRING)</procedure>

Returns a pointer to the selector object for the selector with the name {{STRING}}.

<procedure>(selector->string SELECTOR)</procedure>

Returns the name of the given selector-pointer.

==== Asynchronously callable methods

Methods defined with {{-/async}} or {{+/async}} inside a
{{define-objc-implementation}} declaration may (and must) be called
from a native thread other than the thread in which the CHICKEN
runtime system executes:

<enscript highlight=scheme>
(define-objc-implementation Foo
  ((-/async ping: (int)x)
   (print "ping: " x)
   self))
</scheme>

The implementation of asychronously callable methods uses the [[concurrent-native-callbacks]]
internally.

Note: calling such a method from the same thread will block indefinitely.

==== Method-call read-syntax

<syntax>[RECEIVER SELECTOR ARGUMENT ...]</syntax>

A convenience read-syntax to make method-invocations look more natural. It is entirely
equivalent to {{(@ RECEIVER SELECTOR ARGUMENT ...)}}. To use this syntax, pass

  -X objc-read-syntax

to the compiler when compiling Scheme code using this syntax, or use

  (use objc-read-syntax)

in interpreted code. Note that {{[...]}} is often used as an alternative to {{(...)}},
which is the default behaviour in the CHICKEN reader.

=== Restrictions

A number of restrictions and limitations exist:

* Class-declaration and -definition is only possible in compiled code.

* Instances, classes and selectors are generally passed around as "tagged pointers" which is relatively lightweight but shows little information about the object when printed.

* All method calls are implicitly "safe", they allow callbacks (as in {{foreign-safe-lambda}}. This is slower than using unsafe calls. Currently there is no unsafe method-invocation variant.

* Instance-variables can be assigned strings or vectors or any structured data in general, if the data belongs to Scheme.

* Method-call performance is not particularly good.

=== Issues

On newer Linux systems, dynamic loading of shared objects that are
marked as having an executable stack area will result in a
runtime-error. This applies mostly to code that has been built from
assembler sources and is in fact the case in the
[[http://dyncall.org|dyncall]] library. This issue will be fixed in
the next release of {{dyncall}} but in the time being you can apply
the following patch tot he {{dyncall}} sources:

{{
--- dyncall/dyncall_call.S~	2011-12-13 15:50:45.000000000 +0100
+++ dyncall/dyncall_call.S	2013-05-31 15:51:04.463148581 +0200
@@ -62,3 +62,9 @@
 #    error Unsupported Architecture.
 #  endif
 #endif
+
+	.text
+	
+#if defined(__ELF__)
+	.section .note.GNU-stack,"",%progbits
+#endif
}}

=== Version History

; 0.1 : initial release

=== License

  Copyright (c) 2013, Bevuta IT GmbH
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
  conditions are met:
  
    Redistributions of source code must retain the above copyright notice, this list of conditions and the following
      disclaimer.
    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided with the distribution.
    Neither the name of the author nor the names of its contributors may be used to endorse or promote
      products derived from this software without specific prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
  OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
